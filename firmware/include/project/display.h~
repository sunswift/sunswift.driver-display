/** @mainpage Driver Display function prototypes, macros and defines */

#ifndef _DISPLAY_H_
#define _DISPLAY_H_

#include <project/Lcd.h>
#include <project/LcdConstants.h>
#include <project/Page.h>
#include <project/Line.h>
#include <project/Parameter.h>
#include <project/Slider.h>
#include <project/Coordinate.h>
#include <project/DataSource.h>
#include <arch/uart.h>
#include <project/driver_config.h>

DataSource speed1; 
DataSource speed2; 
DataSource bv1;
DataSource bv2;  
DataSource cc1; 
DataSource cc2; 
DataSource pch1; 
DataSource pch2; 

/*! Defining parameters to capture - Source 1, Source 2, Init value, Init time, Parameter Name, Parameter Label, Parameter Units **/ 
Parameter speed; 
Parameter bv;
Parameter cc; 
Parameter pch; 

DataSource* speed1_addr = &speed1; 

/*! Defining the starting coordinate */
Coordinate startCoordinate = {LCD_START_COORDINATE_X, LCD_START_COORDINATE_Y};

/*! Create sliders and add parameters */
//p.sliders[0].addParameterToSlider(speed); 
//p.sliders[1].addParameterToSlider(bv); 

/*! Define the Lcd, its pages and also the associated slider chart and lines */
Lcd l;

void __init__all__(void) {
    /*! Defining the sources of data */     
    __init__DataSource__(&speed1, SCANDAL_IN_CHANNEL_SPEED1_ADDRESS, SCANDAL_IN_CHANNEL_SPEED1_CHANNEL, 13, 1);      
    __init__DataSource__(&speed2, SCANDAL_IN_CHANNEL_SPEED2_ADDRESS, SCANDAL_IN_CHANNEL_SPEED2_CHANNEL, 0, 0);    
    __init__DataSource__(&bv1, SCANDAL_IN_CHANNEL_BV1_ADDRESS, SCANDAL_IN_CHANNEL_BV1_CHANNEL, -1, 1);
    __init__DataSource__(&bv2, SCANDAL_IN_CHANNEL_BV2_ADDRESS, SCANDAL_IN_CHANNEL_BV2_CHANNEL, 0, 0);    
    __init__DataSource__(&cc1, SCANDAL_IN_CHANNEL_CC1_ADDRESS, SCANDAL_IN_CHANNEL_CC1_CHANNEL, 0, 0);        
    __init__DataSource__(&cc2, SCANDAL_IN_CHANNEL_CC2_ADDRESS, SCANDAL_IN_CHANNEL_CC2_CHANNEL, 0, 0);    
    __init__DataSource__(&pch1, SCANDAL_IN_CHANNEL_PCH1_ADDRESS, SCANDAL_IN_CHANNEL_PCH1_CHANNEL, 0, 0);        
    __init__DataSource__(&pch2, SCANDAL_IN_CHANNEL_PCH2_ADDRESS, SCANDAL_IN_CHANNEL_PCH2_CHANNEL, 0, 0);    
    
    /*! Add the data source to its assocaiated parameters */ 
    __init__Parameter__(&speed, &speed1, &speed2, speed1.value, speed1.time, "Speed", "SP", "k");          
    __init__Parameter__(&bv, &bv1, &bv2, bv1.value, bv1.time, "Battery Voltage", "BV", "V");
    __init__Parameter__(&cc, &cc1, &cc2, cc1.value, cc1.time, "Cruise Control", "CC", "");
    __init__Parameter__(&pch, &pch1, &pch2, pch2.value, pch2.time, "Precharge", "PC", "");
    
#ifdef DEBUG_MODE    
    UART_printf("Speed Parameter: %s: %s: %s\n", speed.name, speed.label, speed.unit);
    UART_printf("BV Parameter: %s: %s: %s\n", bv.name, bv.label, bv.unit);
#endif
    
    /*! Initialise LCD display parameters. Pages, sliders and Lines are automatically 
     *  created recursively when LCD struct is created*/
    __init__Lcd__(&l, LCD_NO_OF_PAGES);        
      
    /*! Defining the Page start */    
    setPageStart(&l.pages[0], startCoordinate);
    setPageStart(&l.pages[1], startCoordinate);

#ifdef DEBUG_MODE
    UART_printf("Page Start: %d, %d\n", startCoordinate.x, startCoordinate.y);    
#endif
    
    /* Adding sliders to draw */    
#if LCD_NO_OF_SLIDERS > 0 
    setMax(&l.pages[0].sliders[0], 20);
    setMin(&l.pages[0].sliders[0], 0);
    addParameterToSlider(&l.pages[0].sliders[0], &speed);
    
    setMax(&l.pages[0].sliders[1], 20);
    setMin(&l.pages[0].sliders[1], 0);
    addParameterToSlider(&l.pages[0].sliders[1], &bv);
    
    setMax(&l.pages[1].sliders[0], 20);
    setMin(&l.pages[1].sliders[0], 0);
    addParameterToSlider(&l.pages[1].sliders[0], &bv);
    
    setMax(&l.pages[1].sliders[1], 20);
    setMin(&l.pages[1].sliders[1], 0);
    addParameterToSlider(&l.pages[1].sliders[1], &speed);    
#endif 
    
    /*! Create lines and add parameters */        
    addParameter(&l.pages[0].lines[0],NULL);
    addParameter(&l.pages[0].lines[1],&speed);
    addParameter(&l.pages[0].lines[2],&bv);
    addParameter(&l.pages[0].lines[3],&cc);
    addParameter(&l.pages[0].lines[4],&pch);
    //addParameter(&l.pages[0].lines[5],NULL);    
    //addParameter(&l.pages[0].lines[6],NULL);
    
    addParameter(&l.pages[1].lines[0],NULL);
    addParameter(&l.pages[1].lines[1],&speed);
    addParameter(&l.pages[1].lines[2],&bv);
    addParameter(&l.pages[1].lines[3],&cc);
    addParameter(&l.pages[1].lines[4],&pch);
    //addParameter(&l.pages[1].lines[5],NULL);    
    //addParameter(&l.pages[0].lines[6],NULL);      
    
}

/*! \brief Defines all channel message interrupt handler. When the data
 * is received, the following channel handlers are called 
 * For each function, we have the following parameters: 
 * \param value - Value received from the CAN 
 * \param src_time - Time on the scandal when the data was received 
 * from CAN
 */
void in_channel_0_handler(int32_t value, uint32_t src_time){
	speed1.value = (unsigned int)value;
	speed1.time  = (unsigned int)src_time;	
}
void in_channel_1_handler(int32_t value, uint32_t src_time){
	speed2.value = (unsigned int)value;
	speed2.time  = (unsigned int)src_time;
}
void in_channel_2_handler(int32_t value, uint32_t src_time){
	bv1.value = (unsigned int)value;
	bv1.time  =(unsigned int) src_time;
}
void in_channel_3_handler(int32_t value, uint32_t src_time){
	bv2.value = (unsigned int)value;
	bv2.time  = (unsigned int)src_time;
}
void in_channel_4_handler(int32_t value, uint32_t src_time){
	cc1.value = (unsigned int)value;
	cc1.time  = (unsigned int)src_time;
}
void in_channel_5_handler(int32_t value, uint32_t src_time){
	cc2.value = (unsigned int)value;
	cc2.time  = (unsigned int)src_time;
}
void in_channel_6_handler(int32_t value, uint32_t src_time){
	pch1.value = (unsigned int)value;
	pch1.time  = (unsigned int)src_time;       
}
void in_channel_7_handler(int32_t value, uint32_t src_time){
	pch2.value = (unsigned int)value;
	pch2.time  = (unsigned int)src_time;
}

void test_in_channel_handler(int32_t value, uint32_t src_time){
        speed1.value = (unsigned int)value;
        speed1.time  = (unsigned int)src_time;
        UART_printf("%d, %d\n", speed1.value, speed1.time);
}

/*! \brief Analog switch control pin to choose between the LCD and uC 
 */
#define TX_CNTL_PORT 1
#define TX_CNTL_PIN  11

/*! \brief Connect TX Line to the LCD. Since FT311D is not present,
 *  we short lines 2 and 3 of the U4 analog switch
 */
#define CONNECT_TO_LCD_PROGRAMMER_INIT GPIO_SetDir(TX_CNTL_PORT, TX_CNTL_PIN, 1);
#define CONNECT_TO_LCD GPIO_SetValue(TX_CNTL_PORT, TX_CNTL_PIN, 0); 
	
#define CONNECT_TO_PROGRAMMER GPIO_SetValue(TX_CNTL_PORT, TX_CNTL_PIN, 1);

#endif
